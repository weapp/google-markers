<html>
  <head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
    <title>Google Maps Multiple Markers</title>
    <script src="https://rawgit.com/pa7/heatmap.js/master/build/heatmap.js"
            type="text/javascript"></script>
    <% if params["map"] == "open" %>
      <link rel="stylesheet" href="https://unpkg.com/leaflet@1.0.2/dist/leaflet.css" />
      <script src="https://unpkg.com/leaflet@1.0.2/dist/leaflet.js"></script>
      <script src="https://cdn.rawgit.com/pa7/heatmap.js/develop/plugins/leaflet-heatmap/leaflet-heatmap.js"></script>
    <% else %>
      <script src="http://maps.google.com/maps/api/js?sensor=false"
              type="text/javascript"></script>

      <script src="https://cdn.rawgit.com/pa7/heatmap.js/develop/plugins/gmaps-heatmap/gmaps-heatmap.js"
              type="text/javascript"></script>
    <% end %>
    <style>
      html{height:100%; padding: 0; margin: 0}
      body{height:100%; padding: 0; margin: 0}
      .box{position: absolute;z-index: 999999;padding: 1em;background: #FFF}
    </style>
  </head>
  <body>
    <div class="box">
      <h1>Broadcast</h1>
      <form id="form">
        <input type="text" id="input" placeholder="send a message"></input>
      </form>
      <ul id="msgs"></ul>
    </div>
    <div id="map" style="width: 100%; height: 100%;"></div>
  </body>
  <script type="text/javascript">
    function HotMarkers(alive_seconds){
      this._markers = []

      function now() {
        return Date.now() / 1000
      }

      this.markers = function(list) {
        return this._markers = this._markers.map(function(obj){
            obj["value"] = (obj["when"] - now() + alive_seconds);
            return obj;
          }).filter(function(obj){
            return obj["value"] > 0;
          });
      }

      this.push = function(pos) {
        pos["when"] || (pos["when"] = now())
        this._markers.push(pos);
        return this.markers();
      }

    }

    function hconfig(){
      // return {
      //   "radius": 0.003,
      //   "maxOpacity": 0.4,
      //   "scaleRadius": true,
      //   "useLocalExtrema": true,
      //   latField: 'lat',
      //   lngField: 'lon',
      //   valueField: 'value'
      // }
      return {
        radius: 15,
        maxOpacity: 0.4,
        scaleRadius: false,
        useLocalExtrema: true,
        latField: 'lat',
        lngField: 'lon',
        valueField: 'value'
      }
    }

    function gMap(el, pos) {
      pos = new google.maps.LatLng(pos.lat, pos.lng);

      var map = new google.maps.Map(el, {
        zoom: 6,
        center: pos,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      });

      var heatmap = new HeatmapOverlay(map, hconfig());

      return heatmap
    }

    function oMap(el, pos) {
      var baseLayer = L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
          attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="http://mapbox.com">Mapbox</a>',
          maxZoom: 15,
          // id: 'mapbox.streets',
          // id: 'mapbox.streets-basic',
          // id: 'mapbox.streets-satellite',
          // id: 'mapbox.mapbox-terrain-v2',
          // id: 'mapbox.mapbox-streets-v7',
          // id: 'mapbox.satellite',
          // id: 'mapbox.pirates',
          // id: 'mapbox.outdoors',
          // id: 'mapbox.wheatpaste',
          // id: 'mapbox.run-bike-hike',
          // id: 'mapbox.comic',
          // id: 'mapbox.light',
          id: 'mapbox.dark',
          // id: 'mapbox.pencil',
          // id: 'mapbox.emerald',
          // id: 'mapbox.high-contrast',
          // id: 'mapbox.mapbox-terrain-v2,mapbox.mapbox-streets-v7',
          accessToken: 'pk.eyJ1Ijoid2VhcHAiLCJhIjoiMWVlODA2ZjI4NGI1MDZiOWQ5Y2M4OTVmMzljOGNiNGYifQ.5m4fN0mBV0HrM0wclNVKOw'
      })

      var heatmap = new HeatmapOverlay(hconfig());

      var map = new L.Map('map', {
        center: new L.LatLng(pos.lat, pos.lng),
        zoom: 6,
        layers: [baseLayer, heatmap]
      });

      return heatmap;
    }

    function Map(el, pos) {
      this.heatmap = <%= params["map"] == "open" %> ? oMap(el, pos) : gMap(el, pos)

      var markers = new HotMarkers(100);

      this.push = function(m) {
        this.heatmap.setData({ max: 1, data: markers.push(m) });
      }

    }


    function WS(router) {
      this.ws = new WebSocket('ws://' + window.location.host + window.location.pathname);
      // this.ws.onopen = router["onopen"]
      // this.ws.onclose   = router["onclose"]
      this.ws.onmessage = function(m) {
        router.call(JSON.parse(m.data));
      };

      this.send = function(value) {
        this.ws.send(JSON.stringify(value));
      }
    }

    function Router(routes) {
        this.call = function(data){
          controller = routes[data["type"]] || function(data){}
          controller(data);
        }
    }

    function Chat(ws, form, input, messages){
      this.push = function(msg){
        messages.innerHTML = msg + '<br />' + messages.innerHTML;
      }

      form.onsubmit = function(){
        ws.send({"type": "msg", "msg": input.value})
        input.value = "";
        return false;
      }
    }

    window.onload = function(){
      (function(){
        var byId = document.getElementById.bind(document)
        var map = new Map(byId('map'), {lat: 40.4165000, lng: -3.7025600})
        var router = new Router({
          msg : function(m){ chat.push("<li>" + m.msg + "</li>"); },
          location : function(m){ map.push(m) }
        })
        var ws = new WS(router);
        var chat = new Chat(ws, byId('form'), byId('input'), byId('msgs'));
      })();
    }
  </script>
</html>
